// filepath: c:\VicBts\GameFundManager\GameFundApp\src\screens\main\GroupDetailsScreen.tsx
// This file combines the original UI with the React Hook order fixes 
import React, { useState, useEffect, useCallback } from 'react';
import { ActivityIndicator, Alert, RefreshControl, StyleSheet } from 'react-native';
import { useRoute, useNavigation } from "@react-navigation/native";
import { RouteProp } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { StatusBar } from 'expo-status-bar';

// Import components and services
import {
  StyledView,
  StyledText,
  StyledTouchableOpacity,
  StyledScrollView,
  StyledImage,
  StyledTextInput
} from "../../utils/StyledComponents";
import { MemberList, FinancialSummary } from '../../components';
import { useApi } from '../../hooks';
import { useAuth } from '../../context/AuthContext';
import { groupService } from '../../services/group.service';
import { expenseService } from '../../services/expense.service';
import { contributionService } from '../../services/contribution.service';
import { pollService } from '../../services/poll.service';
import { RootStackParamList } from '../../navigation/types';
import { Expense } from '../../models/expense.model';
import { Contribution } from '../../models/contribution.model';
import { Group, GroupMember } from '../../models/group.model';
import { Poll } from '../../models/poll.model';
import { CreateGroupRequest } from '../../models';

// SportyApp theme colors
const COLORS = {
  primary: "#0d7377", // Sporty teal/blue
  secondary: "#14BDEB", // Light blue
  accent: "#FF8D29", // Energetic orange
  success: "#32CD32", // Green for positive values
  danger: "#FF4444", // Red for negative values
  background: "#F1F9FF", // Light blue background
  card: "#FFFFFF", // Card background
  text: "#323232", // Main text color
  lightText: "#5A5A5A" // Light text
};

// TypeScript types
type GroupDetailsScreenRouteProp = RouteProp<RootStackParamList, 'GroupDetails'>;
type GroupDetailsNavigationProp = NativeStackNavigationProp<RootStackParamList>;

// Tab types for the group details screen
type TabType =
  | "summary"
  | "members"
  | "expenses"
  | "contributions"
  | "polls"
  | "chat";

const GroupDetailsScreen: React.FC = () => {
  const navigation = useNavigation<GroupDetailsNavigationProp>();
  const route = useRoute<GroupDetailsScreenRouteProp>();
  const { groupId } = route.params;
  const { user } = useAuth();
  
  // IMPORTANT: Always define all state hooks at the top level
  // to ensure consistent hook execution order
  const [activeTab, setActiveTab] = useState<TabType>("summary");
  const [refreshing, setRefreshing] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [groupForm, setGroupForm] = useState<Partial<CreateGroupRequest>>({});
  
  // API hooks for group data - always initialize regardless of which tab is active
  const { 
    data: group, 
    loading: loadingGroup, 
    error: groupError,
    execute: fetchGroup
  } = useApi(() => groupService.getGroupById(groupId), true);

  // Members data
  const {
    data: groupMembers,
    loading: loadingMembers,
    error: membersError,
    execute: fetchMembers
  } = useApi(() => groupService.getGroupMembers(groupId), false);
  
  // Expenses data
  const {
    data: expenses,
    loading: loadingExpenses,
    error: expensesError,
    execute: fetchExpenses
  } = useApi(() => expenseService.getGroupExpenses(groupId), false);
  
  // Contributions data
  const {
    data: contributions,
    loading: loadingContributions,
    error: contributionsError,
    execute: fetchContributions
  } = useApi(() => contributionService.getGroupContributions(groupId), false);

  // Polls data
  const {
    data: polls,
    loading: loadingPolls,
    error: pollsError,
    execute: fetchPolls
  } = useApi(() => pollService.getGroupPolls(groupId), false);
  
  // Group management API hooks
  const {
    loading: updateLoading,
    error: updateError,
    execute: updateGroup
  } = useApi((data: Partial<CreateGroupRequest>) => 
    groupService.updateGroup(groupId, data), false);

  const {
    loading: leaveLoading,
    error: leaveError,
    execute: leaveGroupAPI
  } = useApi(() => 
    groupService.removeGroupMember(groupId, user?.id || ''), false);
  
  // Initialize form data when group is loaded
  useEffect(() => {
    if (group) {
      setGroupForm({
        name: group.name,
        description: group.description,
        targetAmount: group.targetAmount,
        currency: group.currency
      });
    }
  }, [group]);
  
  // Load data for the active tab when it changes
  useEffect(() => {
    // This ensures we don't cause a remounting of components
    // by loading data only when it's needed
    if (activeTab === "members" && !groupMembers?.length) {
      fetchMembers();
    } else if (activeTab === "expenses" && !expenses?.length) {
      fetchExpenses();
    } else if (activeTab === "contributions" && !contributions?.length) {
      fetchContributions();
    } else if (activeTab === "polls" && !polls?.length) {
      fetchPolls();
    }
  }, [
    activeTab, 
    fetchMembers, fetchExpenses, fetchContributions, fetchPolls, 
    groupMembers?.length, expenses?.length, contributions?.length, polls?.length
  ]);
  
  // Helper function to refresh current tab data
  const refreshCurrentTabData = useCallback(() => {
    switch (activeTab) {
      case "summary":
        fetchGroup();
        break;
      case "members":
        fetchMembers();
        break;
      case "expenses":
        fetchExpenses();
        break;
      case "contributions":
        fetchContributions();
        break;
      case "polls":
        fetchPolls();
        break;
      default:
        break;
    }
  }, [activeTab, fetchGroup, fetchMembers, fetchExpenses, fetchContributions, fetchPolls]);
  
  // Handle pull-to-refresh
  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    await refreshCurrentTabData();
    setRefreshing(false);
  }, [refreshCurrentTabData]);
  
  // Calculate financial info
  const getTotalContributions = () => {
    return group?.totalContributions || 0;
  };
  
  const getTotalExpenses = () => {
    return group?.totalExpenses || 0;
  };
  
  const getBalance = () => {
    return group?.balance || 0;
  };
  
  const getProgressPercentage = () => {
    return group?.progressPercentage || 0;
  };
  
  // Event handlers
  const handleEditToggle = () => {
    if (isEditing) {
      // Cancel editing - reset form data
      if (group) {
        setGroupForm({
          name: group.name,
          description: group.description,
          targetAmount: group.targetAmount,
          currency: group.currency
        });
      }
    }
    setIsEditing(!isEditing);
  };
  
  const handleGroupUpdate = async () => {
    try {
      if (!groupForm.name) {
        Alert.alert("Validation Error", "Group name is required");
        return;
      }
      
      const updatedGroup = await updateGroup(groupForm);
      
      if (updatedGroup) {
        setIsEditing(false);
        Alert.alert("Success", "Group updated successfully");
        fetchGroup(); // Refresh group data
      }
    } catch (error: any) {
      Alert.alert("Error", error.message || "Failed to update group");
    }
  };

  const handleLeaveGroup = () => {
    Alert.alert(
      "Leave Group",
      "Are you sure you want to leave this group? This action cannot be undone.",
      [
        { text: "Cancel", style: "cancel" },
        {
          text: "Leave",
          style: "destructive",
          onPress: async () => {
            try {
              await leaveGroupAPI();
              Alert.alert("Success", "You have left the group");
              navigation.goBack();
            } catch (error: any) {
              Alert.alert("Error", error.message || "Failed to leave group");
            }
          }
        }
      ]
    );
  };

  // Render functions for different tabs
  // All these functions are defined regardless of the active tab to 
  // ensure consistent hook execution order
  const renderSummaryTab = () => (
    <StyledView className="px-4 mb-6">
      <FinancialSummary 
        groupId={groupId} 
        currency={group?.currency || "USD"} 
        expenses={Array.isArray(expenses) ? expenses : []}
        contributions={Array.isArray(contributions) ? contributions : []}
        loadingExpenses={loadingExpenses}
        loadingContributions={loadingContributions}
        expensesError={expensesError}
        contributionsError={contributionsError}
        fetchExpenses={fetchExpenses}
        fetchContributions={fetchContributions}
        onViewAllExpenses={() => setActiveTab("expenses")}
        onViewAllContributions={() => setActiveTab("contributions")}
      />
      
      <StyledView className="mt-6">
        <StyledView className="bg-white rounded-xl p-4 shadow-sm mb-4">
          <StyledText className="text-lg font-bold text-gray-800 mb-2">
            Group Information
          </StyledText>
          
          <StyledView className="flex-row justify-between mb-1">
            <StyledText className="text-gray-500">Members</StyledText>
            <StyledText className="font-medium">{group?.memberCount || 0}</StyledText>
          </StyledView>
          
          <StyledView className="flex-row justify-between mb-1">
            <StyledText className="text-gray-500">Target Amount</StyledText>
            <StyledText className="font-medium">
              {group?.currency || 'USD'} {group?.targetAmount || 0}
            </StyledText>
          </StyledView>
          
          <StyledView className="flex-row justify-between mb-1">
            <StyledText className="text-gray-500">Progress</StyledText>
            <StyledText className="font-medium">
              {getProgressPercentage()}%
            </StyledText>
          </StyledView>
          
          <StyledView className="flex-row justify-between">
            <StyledText className="text-gray-500">Owner</StyledText>
            <StyledText className="font-medium">
              {group?.owner ? `${group.owner.firstName} ${group.owner.lastName}` : 'Unknown'}
            </StyledText>
          </StyledView>
        </StyledView>
        
        <StyledView className="bg-white rounded-xl p-4 shadow-sm mb-4">
          <StyledText className="text-lg font-bold text-gray-800 mb-2">
            About
          </StyledText>
          <StyledText className="text-gray-700">
            {group?.description || 'No description available'}
          </StyledText>
        </StyledView>
      </StyledView>
      
      <StyledView className="flex-row justify-between mt-3">
        <StyledTouchableOpacity 
          className="bg-primary py-2 px-6 rounded-lg flex-1 mr-2 items-center"
          onPress={handleEditToggle}
        >
          <StyledText className="text-white font-bold">
            Edit Group
          </StyledText>
        </StyledTouchableOpacity>
        
        <StyledTouchableOpacity 
          className="bg-red-500 py-2 px-6 rounded-lg flex-1 ml-2 items-center"
          onPress={handleLeaveGroup}
        >
          <StyledText className="text-white font-bold">
            Leave Group
          </StyledText>
        </StyledTouchableOpacity>
      </StyledView>
    </StyledView>
  );
  
  const renderMembersTab = () => (
    <StyledView className="px-4 mb-6">
      <StyledView className="flex-row justify-between items-center mb-4">
        <StyledText className="text-lg font-bold text-gray-800">
          {group?.memberCount || 0} Members
        </StyledText>
        {group?.isUserAdmin && (
          <StyledTouchableOpacity 
            className="bg-primary py-2 px-4 rounded-lg"
            onPress={() => {
              Alert.alert("Invite Members", "This feature will be implemented soon!");
            }}
          >
            <StyledText className="text-white font-bold">
              + Invite
            </StyledText>
          </StyledTouchableOpacity>
        )}
      </StyledView>
      
      {loadingMembers ? (
        <StyledView className="items-center justify-center p-10">
          <ActivityIndicator size="large" color={COLORS.primary} />
          <StyledText className="mt-2 text-gray-500">
            Loading members...
          </StyledText>
        </StyledView>
      ) : membersError ? (
        <StyledView className="items-center justify-center p-6">
          <StyledText className="text-red-500 mb-3">
            Failed to load members
          </StyledText>
          <StyledTouchableOpacity
            className="bg-primary py-2 px-4 rounded-lg"
            onPress={fetchMembers}
          >
            <StyledText className="text-white font-bold">
              Try Again
            </StyledText>
          </StyledTouchableOpacity>
        </StyledView>
      ) : (
        <MemberList
          members={groupMembers || []}
          isUserAdmin={group?.isUserAdmin || false}
          groupId={groupId}
          onMemberPress={(member) => {
            const memberName = member.user ? 
              `${member.user.firstName} ${member.user.lastName}` : 'Unknown User';
            Alert.alert(
              'Member Options', 
              `What would you like to do with ${memberName}?`,
              [
                { text: 'Cancel', style: 'cancel' },
                { 
                  text: 'View Profile', 
                  onPress: () => {
                    Alert.alert('Profile', `Navigate to ${memberName}'s profile`);
                  } 
                }
              ]
            );
          }}
        />
      )}
    </StyledView>
  );
  
  const renderExpensesTab = () => (
    <StyledView className="px-4 mb-6">
      <StyledView className="flex-row justify-between items-center mb-4">
        <StyledText className="text-lg font-bold text-gray-800">
          Expenses
        </StyledText>
        <StyledTouchableOpacity 
          className="bg-primary py-2 px-4 rounded-lg"
          onPress={() => navigation.navigate('AddExpense', { groupId })}
        >
          <StyledText className="text-white font-bold">
            Add New
          </StyledText>
        </StyledTouchableOpacity>
      </StyledView>
      
      {loadingExpenses ? (
        <StyledView className="items-center justify-center p-10">
          <ActivityIndicator size="large" color={COLORS.primary} />
          <StyledText className="mt-2 text-gray-500">
            Loading expenses...
          </StyledText>
        </StyledView>
      ) : expensesError ? (
        <StyledView className="items-center justify-center p-6">
          <StyledText className="text-red-500 mb-3">
            Failed to load expenses
          </StyledText>
          <StyledTouchableOpacity
            className="bg-primary py-2 px-4 rounded-lg"
            onPress={fetchExpenses}
          >
            <StyledText className="text-white font-bold">
              Try Again
            </StyledText>
          </StyledTouchableOpacity>
        </StyledView>
      ) : expenses && expenses.length > 0 ? (
        expenses.map((expense) => (
          <StyledView 
            key={expense.id} 
            className="bg-white p-4 rounded-xl shadow-sm mb-3"
          >
            <StyledView className="flex-row justify-between">
              <StyledText className="font-bold text-gray-800">
                {expense.item}
              </StyledText>
              <StyledText className="font-bold text-red-500">
                {group?.currency || 'USD'} {expense.amount.toFixed(2)}
              </StyledText>
            </StyledView>
            
            <StyledView className="flex-row justify-between mt-2">
              <StyledText className="text-gray-500 text-xs">
                Paid by: {expense.paidBy?.firstName} {expense.paidBy?.lastName}
              </StyledText>
              <StyledText className="text-gray-500 text-xs">
                {new Date(expense.expenseDate).toLocaleDateString()}
              </StyledText>
            </StyledView>
            
            {expense.notes && (
              <StyledText className="text-gray-600 mt-2 text-sm">
                {expense.notes}
              </StyledText>
            )}
          </StyledView>
        ))
      ) : (
        <StyledView className="bg-white p-4 rounded-xl shadow-sm items-center">
          <StyledText className="text-gray-500">
            No expenses recorded
          </StyledText>
        </StyledView>
      )}
    </StyledView>
  );
  
  const renderContributionsTab = () => (
    <StyledView className="px-4 mb-6">
      <StyledView className="flex-row justify-between items-center mb-4">
        <StyledText className="text-lg font-bold text-gray-800">
          Contributions
        </StyledText>
        <StyledTouchableOpacity 
          className="bg-primary py-2 px-4 rounded-lg"
          onPress={() => navigation.navigate('AddContribution', { groupId })}
        >
          <StyledText className="text-white font-bold">
            Add New
          </StyledText>
        </StyledTouchableOpacity>
      </StyledView>
      
      {loadingContributions ? (
        <StyledView className="items-center justify-center p-10">
          <ActivityIndicator size="large" color={COLORS.primary} />
          <StyledText className="mt-2 text-gray-500">
            Loading contributions...
          </StyledText>
        </StyledView>
      ) : contributionsError ? (
        <StyledView className="items-center justify-center p-6">
          <StyledText className="text-red-500 mb-3">
            Failed to load contributions
          </StyledText>
          <StyledTouchableOpacity
            className="bg-primary py-2 px-4 rounded-lg"
            onPress={fetchContributions}
          >
            <StyledText className="text-white font-bold">
              Try Again
            </StyledText>
          </StyledTouchableOpacity>
        </StyledView>
      ) : contributions && contributions.length > 0 ? (
        contributions.map((contribution) => (
          <StyledView 
            key={contribution.id} 
            className="bg-white p-4 rounded-xl shadow-sm mb-3"
          >
            <StyledView className="flex-row justify-between">
              <StyledText className="font-medium text-gray-800">
                {contribution.contributor?.firstName} {contribution.contributor?.lastName}
              </StyledText>
              <StyledText className="font-bold text-green-500">
                {group?.currency || 'USD'} {contribution.amount.toFixed(2)}
              </StyledText>
            </StyledView>
            
            <StyledView className="flex-row justify-between mt-2">
              <StyledText className="text-gray-500 text-xs">
                {contribution.description || 'Monthly contribution'}
              </StyledText>
              <StyledText className="text-gray-500 text-xs">
                {new Date(contribution.contributionDate).toLocaleDateString()}
              </StyledText>
            </StyledView>
          </StyledView>
        ))
      ) : (
        <StyledView className="bg-white p-4 rounded-xl shadow-sm items-center">
          <StyledText className="text-gray-500">
            No contributions recorded
          </StyledText>
        </StyledView>
      )}
    </StyledView>
  );
  
  const renderPollsTab = () => (
    <StyledView className="px-4 mb-6">
      <StyledView className="flex-row justify-between items-center mb-4">
        <StyledText className="text-lg font-bold text-gray-800">
          Polls
        </StyledText>
        <StyledTouchableOpacity 
          className="bg-primary py-2 px-4 rounded-lg"
          onPress={() => {
            Alert.alert("Create Poll", "This feature will be implemented soon!");
          }}
        >
          <StyledText className="text-white font-bold">
            Create
          </StyledText>
        </StyledTouchableOpacity>
      </StyledView>
      
      {loadingPolls ? (
        <StyledView className="items-center justify-center p-10">
          <ActivityIndicator size="large" color={COLORS.primary} />
          <StyledText className="mt-2 text-gray-500">
            Loading polls...
          </StyledText>
        </StyledView>
      ) : pollsError ? (
        <StyledView className="items-center justify-center p-6">
          <StyledText className="text-red-500 mb-3">
            Failed to load polls
          </StyledText>
          <StyledTouchableOpacity
            className="bg-primary py-2 px-4 rounded-lg"
            onPress={fetchPolls}
          >
            <StyledText className="text-white font-bold">
              Try Again
            </StyledText>
          </StyledTouchableOpacity>
        </StyledView>
      ) : polls && polls.length > 0 ? (
        polls.map((poll) => (
          <StyledView 
            key={poll.id} 
            className="bg-white p-4 rounded-xl shadow-sm mb-3"
          >
            <StyledText className="font-bold text-gray-800 mb-2">
              {poll.question}
            </StyledText>
            
            {poll.options?.map((option, index) => (
              <StyledView 
                key={index}
                className="bg-gray-100 p-3 rounded-lg mb-2 flex-row justify-between"
              >
                <StyledText>{option.text}</StyledText>
                <StyledText className="font-medium">
                  {option.votes || 0} votes
                </StyledText>
              </StyledView>
            ))}
            
            <StyledView className="flex-row justify-between mt-2">
              <StyledText className="text-gray-500 text-xs">
                Created by: {poll.createdBy?.firstName} {poll.createdBy?.lastName}
              </StyledText>
              <StyledText className="text-gray-500 text-xs">
                {new Date(poll.createdAt).toLocaleDateString()}
              </StyledText>
            </StyledView>
          </StyledView>
        ))
      ) : (
        <StyledView className="bg-white p-4 rounded-xl shadow-sm items-center">
          <StyledText className="text-gray-500">
            No polls created yet
          </StyledText>
        </StyledView>
      )}
    </StyledView>
  );
  
  const renderChatTab = () => (
    <StyledView className="px-4 mb-6 items-center justify-center p-10">
      <StyledText className="text-lg font-bold text-gray-800 mb-4">
        Group Chat
      </StyledText>
      <StyledText className="text-gray-500 text-center mb-4">
        This feature will be available soon!
      </StyledText>
      <StyledImage 
        source={require('../../../assets/icon.png')}
        className="w-32 h-32 opacity-30"
      />
    </StyledView>
  );

  // Content for the active tab
  const renderTabContent = () => {
    switch (activeTab) {
      case "summary":
        return renderSummaryTab();
      case "members":
        return renderMembersTab();
      case "expenses":
        return renderExpensesTab();
      case "contributions":
        return renderContributionsTab();
      case "polls":
        return renderPollsTab();
      case "chat":
        return renderChatTab();
      default:
        return renderSummaryTab();
    }
  };

  // Loading state
  if (loadingGroup && !group) {
    return (
      <StyledView className="flex-1 justify-center items-center bg-background">
        <ActivityIndicator size="large" color={COLORS.primary} />
        <StyledText className="mt-4 text-gray-600">
          Loading group details...
        </StyledText>
      </StyledView>
    );
  }

  // Error state
  if (groupError) {
    return (
      <StyledView className="flex-1 justify-center items-center bg-background p-4">
        <StyledText className="text-red-500 text-center mb-4">
          Failed to load group details: {groupError.message}
        </StyledText>
        <StyledTouchableOpacity
          className="bg-primary py-3 px-6 rounded-lg"
          onPress={fetchGroup}
        >
          <StyledText className="text-white font-bold">
            Try Again
          </StyledText>
        </StyledTouchableOpacity>
      </StyledView>
    );
  }

  // Define tabs
  const tabs = [
    { id: "summary", label: "Summary" },
    { id: "members", label: "Members" },
    { id: "expenses", label: "Expenses" },
    { id: "contributions", label: "Contributions" },
    { id: "polls", label: "Polls" },
    { id: "chat", label: "Chat" },
  ];

  return (
    <StyledView className="flex-1 bg-background">
      <StatusBar style="auto" />
      
      {/* Header */}
      <StyledView className="bg-primary pt-12 pb-3 px-4">
        <StyledView className="flex-row items-center">
          <StyledTouchableOpacity
            className="mr-3"
            onPress={() => navigation.goBack()}
          >
            <StyledText className="text-white text-xl">←</StyledText>
          </StyledTouchableOpacity>
          <StyledText className="text-white text-xl font-bold flex-1">
            {group?.name || 'Group Details'}
          </StyledText>
        </StyledView>
      </StyledView>
      
      {/* Main content */}
      <StyledScrollView
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {/* Tab bar */}
        <StyledScrollView 
          horizontal 
          showsHorizontalScrollIndicator={false}
          className="px-4 pt-3 pb-2"
        >
          <StyledView className="flex-row">
            {tabs.map((tab) => (
              <StyledTouchableOpacity
                key={tab.id}
                className={`px-4 py-2 rounded-full mr-2 ${
                  activeTab === tab.id ? "bg-primary" : "bg-gray-200"
                }`}
                onPress={() => setActiveTab(tab.id as TabType)}
              >
                <StyledText
                  className={`font-medium ${
                    activeTab === tab.id ? "text-white" : "text-gray-700"
                  }`}
                >
                  {tab.label}
                </StyledText>
              </StyledTouchableOpacity>
            ))}
          </StyledView>
        </StyledScrollView>

        {/* Tab content */}
        {renderTabContent()}
      </StyledScrollView>
    </StyledView>
  );
};

export default GroupDetailsScreen;

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameFundManager.API</name>
    </assembly>
    <members>
        <member name="T:GameFundManager.API.Controllers.AuthController">
            <summary>
            Controller for authentication operations
            </summary>
        </member>
        <member name="M:GameFundManager.API.Controllers.AuthController.Register(GameFundManager.Application.DTOs.RegisterUserDto)">
            <summary>
            Register a new user
            </summary>
            <param name="registerDto">User registration information</param>
            <returns>User information with authentication token</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.AuthController.Login(GameFundManager.Application.DTOs.LoginUserDto)">
            <summary>
            Login with existing user credentials
            </summary>
            <param name="loginDto">User login credentials</param>
            <returns>User information with authentication token</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.AuthController.GetCurrentUser">
            <summary>
            Get the current authenticated user's information
            </summary>
            <returns>Current user information</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.AuthController.RefreshToken(GameFundManager.Application.DTOs.RefreshTokenDto)">
            <summary>
            Refresh an authentication token
            </summary>
            <param name="refreshTokenDto">Token refresh request</param>
            <returns>New authentication token</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.AuthController.HealthCheck">
            <summary>
            Health check endpoint to test API connectivity
            </summary>
            <returns>API status information</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ContributionsController.GetContributionById(System.Guid)">
            <summary>
            Get a specific contribution by ID
            </summary>
            <param name="id">Contribution ID to retrieve</param>
            <returns>Details of the specified contribution</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ContributionsController.AddContribution(GameFundManager.Application.DTOs.CreateContributionDto)">
            <summary>
            Add a new contribution to a group
            </summary>
            <param name="contributionDto">Contribution details. If contributorUserId is provided, the contribution will be recorded for that user. Admins can create contributions for other users.</param>
            <returns>Created contribution details</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ContributionsController.UpdateContributionStatus(System.Guid,GameFundManager.Core.Entities.ContributionStatus)">
            <summary>
            Delete a contribution
            </summary>
            <param name="id">Contribution ID to delete</param>
            <returns>Success or failure message</returns>
            <summary>
            Update the status of a contribution
            </summary>
            <param name="id">Contribution ID to update</param>
            <param name="status">New contribution status</param>
            <returns>Updated contribution details</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ContributionsController.GetUserContributions">
            <summary>
            Get all contributions made by the current user
            </summary>
            <returns>List of contributions made by the current user</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ContributionsController.GetSpecificUserContributions(System.Guid)">
            <summary>
            Get all contributions made by a specific user (not just the current user)
            </summary>
            <param name="userId">ID of the user whose contributions to retrieve</param>
            <returns>List of contributions made by the specified user</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ContributionsController.GetGroupContributions(System.Guid)">
            <summary>
            Get all contributions for a specific group
            </summary>
            <param name="groupId">Group ID to retrieve contributions for</param>
            <returns>List of contributions for the specified group</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ContributionsController.GetContributionsByStatus(System.Guid,GameFundManager.Core.Entities.ContributionStatus)">
            <summary>
            Get contributions by status for a specific group
            </summary>
            <param name="groupId">Group ID to retrieve contributions for</param>
            <param name="status">Contribution status to filter by</param>
            <returns>List of contributions with specified status</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ContributionsController.GetGroupContributionsByUser(System.Guid,System.Guid)">
            <summary>
            Get contributions created by a specific user in a group
            </summary>
            <param name="groupId">Group ID to retrieve contributions for</param>
            <param name="userId">User ID who created the contributions</param>
            <returns>List of contributions created by the specified user in the group</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ContributionsController.GetGroupContributionsByUserAndStatus(System.Guid,System.Guid,GameFundManager.Core.Entities.ContributionStatus)">
            <summary>
            Get contributions created by a specific user in a group with a specific status
            </summary>
            <param name="groupId">Group ID to retrieve contributions for</param>
            <param name="userId">User ID who created the contributions</param>
            <param name="status">Contribution status to filter by</param>
            <returns>List of contributions created by the specified user with the specified status</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.GetExpenseById(System.Guid)">
            <summary>
            Get a specific expense by ID
            </summary>
            <param name="id">Expense ID to retrieve</param>
            <returns>Details of the specified expense</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.CreateExpense(GameFundManager.Application.DTOs.CreateExpenseDto)">
            <summary>
            Create a new expense request
            </summary>
            <param name="expenseDto">Expense details</param>
            <returns>Created expense details</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.UpdateExpenseStatus(System.Guid,GameFundManager.Core.Entities.ExpenseStatus)">
            <summary>
            Update the status of an expense
            </summary>
            <param name="id">Expense ID to update</param>
            <param name="status">New expense status</param>
            <returns>Updated expense details</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.DeleteExpense(System.Guid)">
            <summary>
            Delete an expense
            </summary>
            <param name="id">Expense ID to delete</param>
            <returns>Success or failure message</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.GetUserExpenses">
            <summary>
            Get all expenses made by the current user
            </summary>
            <returns>List of expenses made by the current user</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.GetUserExpenses(System.Guid)">
            <summary>
            Get all expenses paid by a specific user
            </summary>
            <param name="userId">User ID to retrieve expenses for</param>
            <returns>List of expenses paid by the specified user</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.GetGroupExpenses(System.Guid)">
            <summary>
            Get all expenses for a specific group
            </summary>
            <param name="groupId">Group ID to retrieve expenses for</param>
            <returns>List of expenses for the specified group</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.GetExpensesByStatus(System.Guid,GameFundManager.Core.Entities.ExpenseStatus)">
            <summary>
            Get expenses by status for a specific group
            </summary>
            <param name="groupId">Group ID to retrieve expenses for</param>
            <param name="status">Expense status to filter by</param>
            <returns>List of expenses with specified status</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.GetGroupExpensesByUser(System.Guid,System.Guid)">
            <summary>
            Get expenses created by a specific user in a group
            </summary>
            <param name="groupId">Group ID to retrieve expenses for</param>
            <param name="userId">User ID who created the expenses</param>
            <returns>List of expenses created by the specified user in the group</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.ExpensesController.GetGroupExpensesByUserAndStatus(System.Guid,System.Guid,GameFundManager.Core.Entities.ExpenseStatus)">
            <summary>
            Get expenses created by a specific user in a group with a specific status
            </summary>
            <param name="groupId">Group ID to retrieve expenses for</param>
            <param name="userId">User ID who created the expenses</param>
            <param name="status">Expense status to filter by</param>
            <returns>List of expenses created by the specified user with the specified status</returns>
        </member>
        <member name="T:GameFundManager.API.Controllers.GroupsController">
            <summary>
            Controller for managing groups and their members
            </summary>
        </member>
        <member name="M:GameFundManager.API.Controllers.GroupsController.GetAllGroups">
            <summary>
            Get all groups
            </summary>
            <returns>List of all funding groups</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.GroupsController.GetGroupById(System.Guid)">
            <summary>
            Get group by ID
            </summary>
            <param name="id">Group ID</param>
            <returns>Group details</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.GroupsController.GetUserGroups">
            <summary>
            Get groups for the current user
            </summary>
            <returns>List of groups the current user belongs to</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.GroupsController.CreateGroup(GameFundManager.Application.DTOs.CreateGroupDto)">
            <summary>
            Create a new group
            </summary>
            <param name="groupDto">Group creation information</param>
            <returns>Newly created group</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.GroupsController.UpdateGroup(System.Guid,GameFundManager.Application.DTOs.CreateGroupDto)">
            <summary>
            Update an existing group
            </summary>
            <param name="id">Group ID to update</param>
            <param name="groupDto">Updated group information</param>
            <returns>Updated group</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.GroupsController.DeleteGroup(System.Guid)">
            <summary>
            Delete a group
            </summary>
            <param name="id">Group ID to delete</param>
            <returns>Success or failure message</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.PollsController.GetGroupPolls(System.Guid)">
            <summary>
            Get all polls for a specific group
            </summary>
            <param name="groupId">Group ID to retrieve polls for</param>
            <returns>List of polls for the specified group</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.PollsController.GetPollById(System.Guid)">
            <summary>
            Get a specific poll by ID
            </summary>
            <param name="id">Poll ID to retrieve</param>
            <returns>Details of the specified poll with voting options and results</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.PollsController.CreatePoll(GameFundManager.Application.DTOs.CreatePollDto)">
            <summary>
            Create a new poll for a group
            </summary>
            <param name="pollDto">Poll details with options</param>
            <returns>Created poll details</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.PollsController.SubmitVote(GameFundManager.Application.DTOs.SubmitPollVoteDto)">
            <summary>
            Submit a vote on a poll
            </summary>
            <param name="voteDto">Vote details</param>
            <returns>Updated poll with voting results</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.PollsController.DeletePoll(System.Guid)">
            <summary>
            Delete a poll
            </summary>
            <param name="id">Poll ID to delete</param>
            <returns>Success or failure message</returns>
        </member>
        <member name="T:GameFundManager.API.Controllers.UsersController">
            <summary>
            Controller for user management operations
            </summary>
        </member>
        <member name="M:GameFundManager.API.Controllers.UsersController.GetAllUsers">
            <summary>
            Get all users
            </summary>
            <returns>List of all users</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.UsersController.GetUserById(System.Guid)">
            <summary>
            Get user by ID
            </summary>
            <param name="id">User ID</param>
            <returns>User information</returns>
        </member>
        <member name="M:GameFundManager.API.Controllers.UsersController.UpdateUser(System.Guid,GameFundManager.Application.DTOs.UserDto)">
            <summary>
            Update user profile
            </summary>
            <param name="id">User ID</param>
            <param name="userDto">Updated user information</param>
            <returns>Updated user information</returns>
        </member>
        <member name="T:GameFundManager.API.Swagger.SwaggerExampleAttribute">
            <summary>
            Attribute for adding example values to parameters and request bodies in Swagger
            </summary>
        </member>
        <member name="T:GameFundManager.API.Swagger.SwaggerResponseExampleAttribute">
            <summary>
            Attribute for adding example values to responses in Swagger
            </summary>
        </member>
    </members>
</doc>
